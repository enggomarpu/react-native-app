{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\MiscWorkSpace\\\\ReactNative\\\\my-app\\\\screens\\\\NoInternet.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Background from \"../components/Background\";\nimport Logo from \"../components/Logo\";\nimport Header from \"../components/Header\";\nimport Paragraph from \"../components/Paragraph\";\nimport Button from \"../components/Button\";\nimport { theme } from \"../core/theme\";\nexport default function NoInternet(props) {\n  var _this = this;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isConnected = _useState2[0],\n      setisConnected = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showError = _useState4[0],\n      setshowError = _useState4[1];\n\n  var heading = props.heading,\n      content = props.content,\n      buttonLabel = props.buttonLabel,\n      errorText = props.errorText;\n  useEffect(function () {\n    var unsubscribe = NetInfo.addEventListener(function (state) {\n      checkStatus(state.isConnected);\n    });\n    return function cleanup() {\n      unsubscribe();\n    };\n  });\n\n  var handleCheckNet = function handleCheckNet() {\n    setshowError(false);\n    NetInfo.fetch().then(function (state) {\n      checkStatus(state.isConnected);\n\n      if (!isConnected) {\n        setshowError(true);\n        setTimeout(function () {\n          setshowError(false);\n        }, 3000);\n      }\n    });\n  };\n\n  var checkStatus = function checkStatus(status) {\n    if (status == true) {\n      setisConnected(false);\n    } else {\n      setisConnected(false);\n    }\n  };\n\n  var errorScreen = function errorScreen() {\n    return React.createElement(Background, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, React.createElement(Logo, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }), React.createElement(Header, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, heading), React.createElement(Paragraph, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, content), React.createElement(Button, {\n      mode: \"contained\",\n      onPress: function onPress() {\n        return handleCheckNet();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, buttonLabel));\n  };\n\n  return isConnected ? props.MainComponent : showError ? React.createElement(View, {\n    style: {\n      backgroundColor: theme.colors.error,\n      padding: 2,\n      alignItems: \"center\",\n      position: \"absolute\",\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: \"white\",\n      fontSize: 12\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, errorText)) : errorScreen;\n}","map":{"version":3,"sources":["D:/MiscWorkSpace/ReactNative/my-app/screens/NoInternet.tsx"],"names":["React","useEffect","useState","NetInfo","Background","Logo","Header","Paragraph","Button","theme","NoInternet","props","isConnected","setisConnected","showError","setshowError","heading","content","buttonLabel","errorText","unsubscribe","addEventListener","state","checkStatus","cleanup","handleCheckNet","fetch","then","setTimeout","status","errorScreen","MainComponent","backgroundColor","colors","error","padding","alignItems","position","width","color","fontSize"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport NetInfo from \"@react-native-community/netinfo\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\nimport Background from \"../components/Background\";\r\nimport Logo from \"../components/Logo\";\r\nimport Header from \"../components/Header\";\r\nimport Paragraph from \"../components/Paragraph\";\r\nimport Button from \"../components/Button\";\r\nimport { theme } from \"../core/theme\";\r\n\r\nexport default function NoInternet(props: any) {\r\n  const [isConnected, setisConnected] = useState(false);\r\n  const [showError, setshowError] = useState(false);\r\n  const { heading, content, buttonLabel, errorText } = props;\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = NetInfo.addEventListener((state) => {\r\n      checkStatus(state.isConnected);\r\n    });\r\n\r\n    return function cleanup() {\r\n      unsubscribe();\r\n    };\r\n  });\r\n\r\n  const handleCheckNet = () => {\r\n    setshowError(false);\r\n    NetInfo.fetch().then((state) => {\r\n      checkStatus(state.isConnected);\r\n      if (!isConnected) {\r\n        setshowError(true);\r\n        setTimeout(function () {\r\n          setshowError(false);\r\n        }, 3000);\r\n      }\r\n    });\r\n  };\r\n\r\n  const checkStatus = (status: any) => {\r\n    if (status == true) {\r\n      setisConnected(false);\r\n    } else {\r\n      setisConnected(false);\r\n    }\r\n  };\r\n\r\n  const errorScreen = () => {\r\n    return (\r\n      <Background>\r\n        <Logo />\r\n        <Header>{heading}</Header>\r\n        <Paragraph>{content}</Paragraph>\r\n        <Button mode=\"contained\" onPress={() => handleCheckNet()}>\r\n          {buttonLabel}\r\n        </Button>\r\n      </Background>\r\n    );\r\n  };\r\n\r\n  return isConnected ? (\r\n    props.MainComponent\r\n  ) : showError ? (\r\n    <View\r\n      style={{\r\n        backgroundColor: theme.colors.error,\r\n        padding: 2,\r\n        alignItems: \"center\",\r\n        position: \"absolute\",\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      <Text style={{ color: \"white\", fontSize: 12 }}>{errorText}</Text>\r\n    </View>\r\n  ) : (\r\n    errorScreen\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}