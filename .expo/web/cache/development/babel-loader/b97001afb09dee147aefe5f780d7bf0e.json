{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Umar\\\\Music\\\\my-app\\\\components\\\\LineChart.tsx\";\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { LineChart, BarChart, PieChart, ProgressChart, StackedBarChart } from \"react-native-chart-kit\";\n\nvar Linechart = function Linechart() {\n  var data = {\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"],\n    datasets: [{\n      data: [20, 45, 28, 80, 99, 43],\n      color: function color() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return \"rgba(134, 65, 244, \" + opacity + \")\";\n      },\n      strokeWidth: 2\n    }],\n    legend: [\"Rainy Days\"]\n  };\n  var screenWidth = Dimensions.get(\"window\").width - 50;\n  var chartConfig = {\n    backgroundColor: \"#e26a00\",\n    backgroundGradientFrom: \"#fb8c00\",\n    backgroundGradientTo: \"#ffa726\",\n    decimalPlaces: 2,\n    color: function color() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return \"rgba(255, 255, 255, \" + opacity + \")\";\n    },\n    labelColor: function labelColor() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return \"rgba(255, 255, 255, \" + opacity + \")\";\n    }\n  };\n  return React.createElement(View, {\n    style: styles.Charts,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, React.createElement(LineChart, {\n    data: data,\n    width: screenWidth,\n    height: 220,\n    yAxisLabel: \"$\",\n    yAxisSuffix: \"k\",\n    yAxisInterval: 1,\n    chartConfig: chartConfig,\n    style: {\n      marginVertical: 8,\n      borderRadius: 16\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }\n  }));\n};\n\nvar Barchart = function Barchart() {\n  return React.createElement(View, {\n    style: styles.Charts,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, React.createElement(BarChart, {\n    data: {\n      labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"],\n      datasets: [{\n        data: [Math.random() * 100, Math.random() * 100, Math.random() * 100, Math.random() * 100, Math.random() * 100, Math.random() * 100]\n      }]\n    },\n    width: Dimensions.get(\"window\").width - 50,\n    height: 220,\n    yAxisLabel: \"$\",\n    yAxisSuffix: \"k\",\n    yAxisInterval: 1,\n    chartConfig: {\n      backgroundColor: \"#e26a00\",\n      backgroundGradientFrom: \"#fb8c00\",\n      backgroundGradientTo: \"#ffa726\",\n      decimalPlaces: 2,\n      color: function color() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return \"rgba(255, 255, 255, \" + opacity + \")\";\n      },\n      labelColor: function labelColor() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return \"rgba(255, 255, 255, \" + opacity + \")\";\n      }\n    },\n    style: {\n      marginVertical: 8,\n      borderRadius: 16\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }\n  }));\n};\n\nvar Piechart = function Piechart() {\n  var data = [{\n    name: \"Seoul\",\n    population: 21500000,\n    color: \"rgba(131, 167, 234, 1)\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  }, {\n    name: \"Toronto\",\n    population: 2800000,\n    color: \"#F00\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  }, {\n    name: \"Beijing\",\n    population: 527612,\n    color: \"red\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  }, {\n    name: \"New York\",\n    population: 8538000,\n    color: \"#ffffff\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  }, {\n    name: \"Moscow\",\n    population: 11920000,\n    color: \"rgb(0, 0, 255)\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  }];\n  var screenWidth = Dimensions.get(\"window\").width - 50;\n  var chartConfig = {\n    backgroundColor: \"#e26a00\",\n    backgroundGradientFrom: \"#fb8c00\",\n    backgroundGradientTo: \"#ffa726\",\n    decimalPlaces: 2,\n    color: function color() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return \"rgba(255, 255, 255, \" + opacity + \")\";\n    },\n    labelColor: function labelColor() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return \"rgba(255, 255, 255, \" + opacity + \")\";\n    }\n  };\n  return React.createElement(View, {\n    style: styles.Charts,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, React.createElement(PieChart, {\n    data: data,\n    width: screenWidth,\n    height: 220,\n    chartConfig: chartConfig,\n    accessor: \"population\",\n    backgroundColor: \"transparent\",\n    paddingLeft: \"0\",\n    absolute: true,\n    style: {\n      marginVertical: 8,\n      borderRadius: 16\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 8\n    }\n  }));\n};\n\nvar Progresschart = function Progresschart() {\n  var data = {\n    labels: [\"Swim\", \"Bike\", \"Run\"],\n    data: [0.4, 0.6, 0.8]\n  };\n  var screenWidth = Dimensions.get(\"window\").width - 50;\n  var chartConfig = {\n    backgroundColor: \"#e26a00\",\n    backgroundGradientFrom: \"#fb8c00\",\n    backgroundGradientTo: \"#ffa726\",\n    decimalPlaces: 2,\n    color: function color() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return \"rgba(255, 255, 255, \" + opacity + \")\";\n    },\n    labelColor: function labelColor() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return \"rgba(255, 255, 255, \" + opacity + \")\";\n    }\n  };\n  return React.createElement(View, {\n    style: styles.Charts,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 5\n    }\n  }, React.createElement(ProgressChart, {\n    data: data,\n    width: screenWidth,\n    height: 220,\n    strokeWidth: 16,\n    radius: 32,\n    chartConfig: chartConfig,\n    hideLegend: false,\n    style: {\n      marginVertical: 8,\n      borderRadius: 16\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 4\n    }\n  }));\n};\n\nvar StackedBarchart = function StackedBarchart() {\n  var data = {\n    labels: [\"Test1\", \"Test2\"],\n    legend: [\"L1\", \"L2\", \"L3\"],\n    data: [[60, 60, 60], [30, 30, 60]],\n    barColors: [\"#dfe4ea\", \"#ced6e0\", \"#a4b0be\"]\n  };\n  var screenWidth = Dimensions.get(\"window\").width - 50;\n  var chartConfig = {\n    backgroundColor: \"#e26a00\",\n    backgroundGradientFrom: \"#fb8c00\",\n    backgroundGradientTo: \"#ffa726\",\n    decimalPlaces: 2,\n    color: function color() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return \"rgba(255, 255, 255, \" + opacity + \")\";\n    },\n    labelColor: function labelColor() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return \"rgba(255, 255, 255, \" + opacity + \")\";\n    }\n  };\n  return React.createElement(View, {\n    style: styles.Charts,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 5\n    }\n  }, React.createElement(StackedBarChart, {\n    data: data,\n    width: screenWidth,\n    height: 220,\n    chartConfig: chartConfig,\n    hideLegend: false,\n    style: {\n      marginVertical: 8,\n      borderRadius: 16\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 4\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  Charts: {\n    margin: 50\n  }\n});\nexport { Linechart, Barchart, Piechart, Progresschart, StackedBarchart };","map":{"version":3,"sources":["C:/Users/Umar/Music/my-app/components/LineChart.tsx"],"names":["React","LineChart","BarChart","PieChart","ProgressChart","StackedBarChart","Linechart","data","labels","datasets","color","opacity","strokeWidth","legend","screenWidth","Dimensions","get","width","chartConfig","backgroundColor","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","labelColor","styles","Charts","marginVertical","borderRadius","Barchart","Math","random","Piechart","name","population","legendFontColor","legendFontSize","Progresschart","StackedBarchart","barColors","StyleSheet","create","margin"],"mappings":"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","sourcesContent":["import { AutoFocus } from \"expo-camera/build/Camera.types\";\nimport React, { memo , useState} from \"react\";\nimport { View,Dimensions,StyleSheet} from \"react-native\";\nimport {\n  LineChart,\n  BarChart,\n  PieChart,\n  ProgressChart,\n  StackedBarChart\n} from \"react-native-chart-kit\";\n\n \n\n\n  const Linechart = () => {\n    const data = {\n        labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"],\n        datasets: [\n          {\n            data: [20, 45, 28, 80, 99, 43],\n            color: (opacity = 1) => `rgba(134, 65, 244, ${opacity})`, // optional\n            strokeWidth: 2 // optional\n          }\n        ],\n        legend: [\"Rainy Days\"] // optional\n      };\n      const screenWidth=Dimensions.get(\"window\").width-50;\n\n      const chartConfig = {\n        backgroundColor: \"#e26a00\",\n        backgroundGradientFrom: \"#fb8c00\",\n        backgroundGradientTo: \"#ffa726\",\n        decimalPlaces: 2, // optional, defaults to 2dp\n        color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n        labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`\n      };\n    return(\n     \n    <View style={styles.Charts}>\n   <LineChart\n   data={data}\n   width={screenWidth} // from react-native\n   height={220}\n   yAxisLabel=\"$\"\n   yAxisSuffix=\"k\"\n   yAxisInterval={1} // optional, defaults to 1\n   chartConfig={chartConfig}\n   style={{\n     marginVertical: 8,\n     borderRadius: 16\n   }}\n />\n   </View>\n       \n )};\nconst Barchart = () => (\n    <View style={styles.Charts}>\n   <BarChart\n     data={{\n       labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"],\n       datasets: [\n         {\n           data: [\n             Math.random() * 100,\n             Math.random() * 100,\n             Math.random() * 100,\n             Math.random() * 100,\n             Math.random() * 100,\n             Math.random() * 100\n           ]\n         }\n       ]\n     }}\n     width={Dimensions.get(\"window\").width-50} // from react-native\n     height={220}\n     yAxisLabel=\"$\"\n     yAxisSuffix=\"k\"\n     yAxisInterval={1} // optional, defaults to 1\n     chartConfig={{\n       backgroundColor: \"#e26a00\",\n       backgroundGradientFrom: \"#fb8c00\",\n       backgroundGradientTo: \"#ffa726\",\n       decimalPlaces: 2, // optional, defaults to 2dp\n       color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n       labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n     }}\n     style={{\n       marginVertical: 8,\n       borderRadius: 16\n     }}\n   />\n </View>\n       \n );\n const Piechart = () => {\n    const data = [\n        {\n          name: \"Seoul\",\n          population: 21500000,\n          color: \"rgba(131, 167, 234, 1)\",\n          legendFontColor: \"#7F7F7F\",\n          legendFontSize: 15\n        },\n        {\n          name: \"Toronto\",\n          population: 2800000,\n          color: \"#F00\",\n          legendFontColor: \"#7F7F7F\",\n          legendFontSize: 15\n        },\n        {\n          name: \"Beijing\",\n          population: 527612,\n          color: \"red\",\n          legendFontColor: \"#7F7F7F\",\n          legendFontSize: 15\n        },\n        {\n          name: \"New York\",\n          population: 8538000,\n          color: \"#ffffff\",\n          legendFontColor: \"#7F7F7F\",\n          legendFontSize: 15\n        },\n        {\n          name: \"Moscow\",\n          population: 11920000,\n          color: \"rgb(0, 0, 255)\",\n          legendFontColor: \"#7F7F7F\",\n          legendFontSize: 15\n        }\n      ];\n      const screenWidth=Dimensions.get(\"window\").width-50;\n      const chartConfig = {\n        backgroundColor: \"#e26a00\",\n        backgroundGradientFrom: \"#fb8c00\",\n        backgroundGradientTo: \"#ffa726\",\n        decimalPlaces: 2, // optional, defaults to 2dp\n        color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n        labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n        \n      };\n   return (\n        <View style={styles.Charts}>\n       <PieChart\n      data={data}\n      width={screenWidth}\n      height={220}\n      chartConfig={chartConfig}\n      accessor={\"population\"}\n      backgroundColor={\"transparent\"}\n      paddingLeft={\"0\"}\n      absolute\n      style={{\n        marginVertical: 8,\n        borderRadius: 16\n      }}\n    /> \n     </View>\n           \n     )\n };\n const Progresschart = () => {\n    const data = {\n        labels: [\"Swim\", \"Bike\", \"Run\"], // optional\n        data: [0.4, 0.6, 0.8]\n      };\n      const screenWidth=Dimensions.get(\"window\").width-50;\n      const chartConfig = {\n        backgroundColor: \"#e26a00\",\n        backgroundGradientFrom: \"#fb8c00\",\n        backgroundGradientTo: \"#ffa726\",\n        decimalPlaces: 2, // optional, defaults to 2dp\n        color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n        labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n      };\n    return(\n     \n    <View style={styles.Charts}>\n   <ProgressChart\n  data={data}\n  width={screenWidth}\n  height={220}\n  strokeWidth={16}\n  radius={32}\n  chartConfig={chartConfig}\n  hideLegend={false}\n  style={{\n    marginVertical: 8,\n    borderRadius: 16\n  }}\n/>\n   </View>\n       \n )};\n const StackedBarchart = () => {\n    const data = {\n        labels: [\"Test1\", \"Test2\"],\n        legend: [\"L1\", \"L2\", \"L3\"],\n        data: [\n          [60, 60, 60],\n          [30, 30, 60]\n        ],\n        barColors: [\"#dfe4ea\", \"#ced6e0\", \"#a4b0be\"]\n        \n      };\n      const screenWidth=Dimensions.get(\"window\").width-50;\n      const chartConfig = {\n        backgroundColor: \"#e26a00\",\n        backgroundGradientFrom: \"#fb8c00\",\n        backgroundGradientTo: \"#ffa726\",\n        decimalPlaces: 2, // optional, defaults to 2dp\n        color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n        labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`\n      };\n     return(\n    <View style={styles.Charts}>\n   <StackedBarChart\n  data={data}\n  width={screenWidth}\n  height={220}\n  chartConfig={chartConfig}\n  hideLegend={false}\n  style={{\n    marginVertical: 8,\n    borderRadius: 16\n  }}\n/>\n </View>\n       \n )};\n const styles = StyleSheet.create({\n  \n  Charts: {\n    margin : 50,\n  },\n \n});\n export { Linechart, Barchart,Piechart,Progresschart,StackedBarchart };"]},"metadata":{},"sourceType":"module"}