{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\MiscWorkSpace\\\\ReactNative\\\\my-app\\\\App.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport { Asset } from \"expo-asset\";\nimport AppLoading from \"expo-app-loading\";\nimport NoInternet from \"./screens/NoInternet\";\nimport { theme } from \"./core/theme\";\nimport App from \"./navigation\";\nvar images = [require(\"./assets/logo.png\"), require(\"./assets/arrow_back.png\"), require(\"./assets/logo.png\"), require(\"./assets/logo.png\")];\nexport default function Main() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _cacheResourcesAsync = function _cacheResourcesAsync() {\n    var cacheImages;\n    return _regeneratorRuntime.async(function _cacheResourcesAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            cacheImages = images.map(function (image) {\n              return Asset.fromModule(image).downloadAsync();\n            });\n            return _context.abrupt(\"return\", Promise.all(cacheImages));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!isLoading) {\n    return React.createElement(AppLoading, {\n      startAsync: _cacheResourcesAsync,\n      onError: function onError(error) {\n        return console.warn(error);\n      },\n      onFinish: function onFinish() {\n        return setIsLoading(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(PaperProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, React.createElement(NoInternet, {\n    heading: \"Oops! There is no Internet Connection\",\n    content: \"We're having a little difficulty in connecting to the Internet. Please check your connection and try again.\",\n    buttonLabel: \"Try Again\",\n    errorText: \"We still can't connect - please try again.\",\n    MainComponent: React.createElement(App, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 24\n      }\n    }),\n    containerStyle: {\n      backgroundColor: \"orange\"\n    },\n    textStyle: {\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["D:/MiscWorkSpace/ReactNative/my-app/App.tsx"],"names":["React","useState","Provider","PaperProvider","Asset","AppLoading","NoInternet","theme","App","images","require","Main","isLoading","setIsLoading","_cacheResourcesAsync","cacheImages","map","image","fromModule","downloadAsync","Promise","all","error","console","warn","backgroundColor","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAQ,IAAIC,aAArB,QAA0C,oBAA1C;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,UAAP;AACA,SAASC,KAAT;AACA,OAAOC,GAAP;AAEA,IAAMC,MAAM,GAAG,CACbC,OAAO,qBADM,EAEbA,OAAO,2BAFM,EAGbA,OAAO,qBAHM,EAIbA,OAAO,qBAJM,CAAf;AAOA,eAAe,SAASC,IAAT,GAAgB;AAC7B,kBAAkCV,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOW,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGrBC,YAAAA,WAHqB,GAGPN,MAAM,CAACO,GAAP,CAAW,UAACC,KAAD,EAAW;AACxC,qBAAOb,KAAK,CAACc,UAAN,CAAiBD,KAAjB,EAAwBE,aAAxB,EAAP;AACD,aAFmB,CAHO;AAAA,6CAOpBC,OAAO,CAACC,GAAR,CAAYN,WAAZ,CAPoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAUA,MAAI,CAACH,SAAL,EAAgB;AACd,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAEE,oBADd;AAEE,MAAA,OAAO,EAAE,iBAACQ,KAAD;AAAA,eAAWC,OAAO,CAACC,IAAR,CAAaF,KAAb,CAAX;AAAA,OAFX;AAGE,MAAA,QAAQ,EAAE;AAAA,eAAMT,YAAY,CAAC,IAAD,CAAlB;AAAA,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AAED,SACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEN,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAE,uCADX;AAEE,IAAA,OAAO,EACL,6GAHJ;AAKE,IAAA,WAAW,EAAE,WALf;AAME,IAAA,SAAS,EAAE,4CANb;AAOE,IAAA,aAAa,EAAE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPjB;AAQE,IAAA,cAAc,EAAE;AAAEkB,MAAAA,eAAe,EAAE;AAAnB,KARlB;AASE,IAAA,SAAS,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KATb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAeD","sourcesContent":["import React, { useState } from \"react\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport { Asset } from \"expo-asset\";\nimport AppLoading from \"expo-app-loading\";\nimport NoInternet from \"./screens/NoInternet\";\nimport { theme } from \"./core/theme\";\nimport App from \"./navigation\";\n\nconst images = [\n  require(\"./assets/logo.png\"),\n  require(\"./assets/arrow_back.png\"),\n  require(\"./assets/logo.png\"),\n  require(\"./assets/logo.png\"),\n];\n\nexport default function Main() {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const _cacheResourcesAsync = async () => {\n    // we're caching all the images\n    // for better performance on the app\n    const cacheImages = images.map((image) => {\n      return Asset.fromModule(image).downloadAsync();\n    });\n\n    return Promise.all(cacheImages);\n  };\n\n  if (!isLoading) {\n    return (\n      <AppLoading\n        startAsync={_cacheResourcesAsync}\n        onError={(error) => console.warn(error)}\n        onFinish={() => setIsLoading(true)}\n      />\n    );\n  }\n\n  return (\n    <PaperProvider theme={theme}>\n      <NoInternet\n        heading={\"Oops! There is no Internet Connection\"}\n        content={\n          \"We're having a little difficulty in connecting to the Internet. Please check your connection and try again.\"\n        }\n        buttonLabel={\"Try Again\"}\n        errorText={\"We still can't connect - please try again.\"}\n        MainComponent={<App />}\n        containerStyle={{ backgroundColor: \"orange\" }}\n        textStyle={{ color: \"white\" }}\n      />\n    </PaperProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}