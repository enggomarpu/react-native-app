{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Umar\\\\Music\\\\my-app\\\\App.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport { Asset } from \"expo-asset\";\nimport AppLoading from \"expo-app-loading\";\nimport NoInternet from \"./screens/NoInternet\";\nimport { CombinedDefaultTheme, CombinedDarkTheme } from \"./core/theme\";\nimport { PreferencesContext } from \"./components/context\";\nimport App from \"./navigation\";\nvar images = [require(\"./assets/logo.png\"), require(\"./assets/arrow_back.png\"), require(\"./assets/background_dot.png\")];\nexport default function Main() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isThemeDark = _React$useState2[0],\n      setIsThemeDark = _React$useState2[1];\n\n  var theme = isThemeDark ? CombinedDarkTheme : CombinedDefaultTheme;\n  var toggleTheme = React.useCallback(function () {\n    return setIsThemeDark(!isThemeDark);\n  }, [isThemeDark]);\n  var preferences = React.useMemo(function () {\n    return {\n      toggleTheme: toggleTheme,\n      isThemeDark: isThemeDark\n    };\n  }, [toggleTheme, isThemeDark]);\n\n  var _cacheResourcesAsync = function _cacheResourcesAsync() {\n    var cacheImages;\n    return _regeneratorRuntime.async(function _cacheResourcesAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            cacheImages = images.map(function (image) {\n              return Asset.fromModule(image).downloadAsync();\n            });\n            return _context.abrupt(\"return\", Promise.all(cacheImages));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!isLoading) {\n    return React.createElement(AppLoading, {\n      startAsync: _cacheResourcesAsync,\n      onError: function onError(error) {\n        return console.warn(error);\n      },\n      onFinish: function onFinish() {\n        return setIsLoading(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(PreferencesContext.Provider, {\n    value: preferences,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, React.createElement(PaperProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, React.createElement(NoInternet, {\n    heading: \"Oops! There is no Internet Connection\",\n    content: \"We're having a little difficulty in connecting to the Internet. Please check your connection and try again.\",\n    buttonLabel: \"Try Again\",\n    errorText: \"We still can't connect - please try again.\",\n    MainComponent: React.createElement(App, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 24\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/Umar/Music/my-app/App.tsx"],"names":["React","useState","Provider","PaperProvider","Asset","AppLoading","NoInternet","CombinedDefaultTheme","CombinedDarkTheme","PreferencesContext","App","images","require","Main","isLoading","setIsLoading","isThemeDark","setIsThemeDark","theme","toggleTheme","useCallback","preferences","useMemo","_cacheResourcesAsync","cacheImages","map","image","fromModule","downloadAsync","Promise","all","error","console","warn"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAQ,IAAIC,aAArB,QAA0C,oBAA1C;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,UAAP;AACA,SAASC,oBAAT,EAA8BC,iBAA9B;AACA,SAASC,kBAAT;AACA,OAAOC,GAAP;AACA,IAAMC,MAAM,GAAG,CACbC,OAAO,qBADM,EAEbA,OAAO,2BAFM,EAGbA,OAAO,+BAHM,CAAf;AAKA,eAAe,SAASC,IAAT,GAAgB;AAC7B,kBAAkCZ,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOa,SAAP;AAAA,MAAkBC,YAAlB;;AACA,wBAAsCf,KAAK,CAACC,QAAN,CAAe,KAAf,CAAtC;AAAA;AAAA,MAAOe,WAAP;AAAA,MAAoBC,cAApB;;AAEA,MAAIC,KAAK,GAAGF,WAAW,GAAGR,iBAAH,GAAuBD,oBAA9C;AAEA,MAAMY,WAAW,GAAGnB,KAAK,CAACoB,WAAN,CAAkB,YAAM;AAC1C,WAAOH,cAAc,CAAC,CAACD,WAAF,CAArB;AACD,GAFmB,EAEjB,CAACA,WAAD,CAFiB,CAApB;AAIA,MAAMK,WAAW,GAAGrB,KAAK,CAACsB,OAAN,CAClB;AAAA,WAAO;AACLH,MAAAA,WAAW,EAAXA,WADK;AAELH,MAAAA,WAAW,EAAXA;AAFK,KAAP;AAAA,GADkB,EAKlB,CAACG,WAAD,EAAcH,WAAd,CALkB,CAApB;;AAOA,MAAMO,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGrBC,YAAAA,WAHqB,GAGPb,MAAM,CAACc,GAAP,CAAW,UAACC,KAAD,EAAW;AACxC,qBAAOtB,KAAK,CAACuB,UAAN,CAAiBD,KAAjB,EAAwBE,aAAxB,EAAP;AACD,aAFmB,CAHO;AAAA,6CAOpBC,OAAO,CAACC,GAAR,CAAYN,WAAZ,CAPoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAUA,MAAI,CAACV,SAAL,EAAgB;AACd,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAES,oBADd;AAEE,MAAA,OAAO,EAAE,iBAACQ,KAAD;AAAA,eAAWC,OAAO,CAACC,IAAR,CAAaF,KAAb,CAAX;AAAA,OAFX;AAGE,MAAA,QAAQ,EAAE;AAAA,eAAMhB,YAAY,CAAC,IAAD,CAAlB;AAAA,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AAED,SACE,oBAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEM,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEH,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,UAAD;AACE,IAAA,OAAO,EAAE,uCADX;AAEE,IAAA,OAAO,EACL,6GAHJ;AAKE,IAAA,WAAW,EAAE,WALf;AAME,IAAA,SAAS,EAAE,4CANb;AAOE,IAAA,aAAa,EAAE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADF,CADF;AAiBD","sourcesContent":["import React, { useState } from \"react\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport { Asset } from \"expo-asset\";\nimport AppLoading from \"expo-app-loading\";\nimport NoInternet from \"./screens/NoInternet\";\nimport { CombinedDefaultTheme,CombinedDarkTheme} from \"./core/theme\";\nimport { PreferencesContext } from './components/context';\nimport App from \"./navigation\";\nconst images = [\n  require(\"./assets/logo.png\"),\n  require(\"./assets/arrow_back.png\"),\n  require(\"./assets/background_dot.png\"),\n];\nexport default function Main() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isThemeDark, setIsThemeDark] = React.useState(false);\n\n  let theme = isThemeDark ? CombinedDarkTheme : CombinedDefaultTheme;\n\n  const toggleTheme = React.useCallback(() => {\n    return setIsThemeDark(!isThemeDark);\n  }, [isThemeDark]);\n\n  const preferences = React.useMemo(\n    () => ({\n      toggleTheme,\n      isThemeDark,\n    }),\n    [toggleTheme, isThemeDark]\n  );\n  const _cacheResourcesAsync = async () => {\n    // we're caching all the images\n    // for better performance on the app\n    const cacheImages = images.map((image) => {\n      return Asset.fromModule(image).downloadAsync();\n    });\n\n    return Promise.all(cacheImages);\n  };\n\n  if (!isLoading) {\n    return (\n      <AppLoading\n        startAsync={_cacheResourcesAsync}\n        onError={(error) => console.warn(error)}\n        onFinish={() => setIsLoading(true)}\n      />\n    );\n  }\n\n  return (\n    <PreferencesContext.Provider value={preferences}>\n      <PaperProvider theme={theme}>\n      <NoInternet\n        heading={\"Oops! There is no Internet Connection\"}\n        content={\n          \"We're having a little difficulty in connecting to the Internet. Please check your connection and try again.\"\n        }\n        buttonLabel={\"Try Again\"}\n        errorText={\"We still can't connect - please try again.\"}\n        MainComponent={<App/>}\n      />\n      </PaperProvider>\n\n    </PreferencesContext.Provider>\n   \n  );\n}\n"]},"metadata":{},"sourceType":"module"}