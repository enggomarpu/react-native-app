{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\MiscWorkSpace\\\\ReactNative\\\\my-app\\\\App.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport { Asset } from \"expo-asset\";\nimport AppLoading from \"expo-app-loading\";\nimport Welcome from \"./screens/welcome\";\nvar images = [require(\"./assets/logo.png\")];\nexport default function App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _cacheResourcesAsync = function _cacheResourcesAsync() {\n    var cacheImages;\n    return _regeneratorRuntime.async(function _cacheResourcesAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            cacheImages = images.map(function (image) {\n              return Asset.fromModule(image).downloadAsync();\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!isLoading) {\n    return React.createElement(AppLoading, {\n      startAsync: _cacheResourcesAsync,\n      onError: function onError(error) {\n        return console.warn(error);\n      },\n      onFinish: function onFinish() {\n        return setIsLoading(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(PaperProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, React.createElement(Welcome, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["D:/MiscWorkSpace/ReactNative/my-app/App.tsx"],"names":["React","useState","Provider","PaperProvider","Asset","AppLoading","Welcome","images","require","App","isLoading","setIsLoading","_cacheResourcesAsync","cacheImages","map","image","fromModule","downloadAsync","error","console","warn"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAQ,IAAIC,aAArB,QAA0C,oBAA1C;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,OAAP;AAEA,IAAMC,MAAM,GAAG,CAACC,OAAO,qBAAR,CAAf;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAkCR,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOS,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGrBC,YAAAA,WAHqB,GAGPN,MAAM,CAACO,GAAP,CAAW,UAACC,KAAD,EAAW;AACxC,qBAAOX,KAAK,CAACY,UAAN,CAAiBD,KAAjB,EAAwBE,aAAxB,EAAP;AACD,aAFmB,CAHO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAQA,MAAI,CAACP,SAAL,EAAgB;AACd,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAEE,oBADd;AAEE,MAAA,OAAO,EAAE,iBAACM,KAAD;AAAA,eAAWC,OAAO,CAACC,IAAR,CAAaF,KAAb,CAAX;AAAA,OAFX;AAGE,MAAA,QAAQ,EAAE;AAAA,eAAMP,YAAY,CAAC,IAAD,CAAlB;AAAA,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AAED,SACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD","sourcesContent":["import React, { useState } from \"react\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport { Asset } from \"expo-asset\";\nimport AppLoading from \"expo-app-loading\";\nimport Welcome from \"./screens/welcome\";\n\nconst images = [require(\"./assets/logo.png\")];\n\nexport default function App() {\n  const [isLoading, setIsLoading] = useState(true);\n\n  const _cacheResourcesAsync = async () => {\n    // we're caching all the images\n    // for better performance on the app\n    const cacheImages = images.map((image) => {\n      return Asset.fromModule(image).downloadAsync();\n    });\n  };\n\n  if (!isLoading) {\n    return (\n      <AppLoading\n        startAsync={_cacheResourcesAsync}\n        onError={(error) => console.warn(error)}\n        onFinish={() => setIsLoading(true)}\n      />\n    );\n  }\n\n  return (\n    <PaperProvider>\n      <Welcome />\n    </PaperProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}