{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExpoFaceDetector from \"./ExpoFaceDetector\";\nexport function detectFacesAsync(uri) {\n  var options,\n      _args = arguments;\n  return _regeneratorRuntime.async(function detectFacesAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n          if (ExpoFaceDetector.detectFaces) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-face-detector', 'detectFaces');\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(ExpoFaceDetector.detectFaces(_objectSpread(_objectSpread({}, options), {}, {\n            uri: uri\n          })));\n\n        case 5:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport var Constants = {\n  Mode: ExpoFaceDetector.Mode,\n  Landmarks: ExpoFaceDetector.Landmarks,\n  Classifications: ExpoFaceDetector.Classifications\n};","map":{"version":3,"sources":["../src/FaceDetector.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAS,mBAAT,QAAoC,kBAApC;AAEA,OAAO,gBAAP;AAoDA,OAAO,SAAe,gBAAf,CACL,GADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEL,UAAA,OAFK,2DAEuB,EAFvB;;AAAA,cAIA,gBAAgB,CAAC,WAJjB;AAAA;AAAA;AAAA;;AAAA,gBAKG,IAAI,mBAAJ,CAAwB,oBAAxB,EAA8C,aAA9C,CALH;;AAAA;AAAA;AAAA,2CAOQ,gBAAgB,CAAC,WAAjB,iCAAkC,OAAlC;AAA2C,YAAA,GAAG,EAAH;AAA3C,aAPR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,IAAM,SAAS,GAAG;AACvB,EAAA,IAAI,EAAE,gBAAgB,CAAC,IADA;AAEvB,EAAA,SAAS,EAAE,gBAAgB,CAAC,SAFL;AAGvB,EAAA,eAAe,EAAE,gBAAgB,CAAC;AAHX,CAAlB","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoFaceDetector from './ExpoFaceDetector';\n\ntype Point = { x: number; y: number };\n\nexport type FaceFeature = {\n  bounds: {\n    size: {\n      width: number;\n      height: number;\n    };\n    origin: Point;\n  };\n  smilingProbability?: number;\n  leftEarPosition?: Point;\n  rightEarPosition?: Point;\n  leftEyePosition?: Point;\n  leftEyeOpenProbability?: number;\n  rightEyePosition?: Point;\n  rightEyeOpenProbability?: number;\n  leftCheekPosition?: Point;\n  rightCheekPosition?: Point;\n  leftMouthPosition?: Point;\n  mouthPosition?: Point;\n  rightMouthPosition?: Point;\n  bottomMouthPosition?: Point;\n  noseBasePosition?: Point;\n  yawAngle?: number;\n  rollAngle?: number;\n  faceID?: number;\n};\n\ntype ValuesOf<T extends any[]> = T[number];\n\nexport type FaceDetectorMode = string[];\n\nexport type FaceDetectorLandmarks = ValuesOf<typeof ExpoFaceDetector.Landmarks>;\n\nexport type FaceDetectorClassifications = ValuesOf<typeof ExpoFaceDetector.Classifications>;\n\nexport interface Image {\n  uri: string;\n  width: number;\n  height: number;\n  orientation: number;\n}\n\nexport type DetectionOptions = {\n  mode?: FaceDetectorMode;\n  detectLandmarks?: FaceDetectorLandmarks;\n  runClassifications?: FaceDetectorClassifications;\n};\n\nexport async function detectFacesAsync(\n  uri: string,\n  options: DetectionOptions = {}\n): Promise<{ faces: FaceFeature[]; image: Image }> {\n  if (!ExpoFaceDetector.detectFaces) {\n    throw new UnavailabilityError('expo-face-detector', 'detectFaces');\n  }\n  return await ExpoFaceDetector.detectFaces({ ...options, uri });\n}\n\nexport const Constants = {\n  Mode: ExpoFaceDetector.Mode,\n  Landmarks: ExpoFaceDetector.Landmarks,\n  Classifications: ExpoFaceDetector.Classifications,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}