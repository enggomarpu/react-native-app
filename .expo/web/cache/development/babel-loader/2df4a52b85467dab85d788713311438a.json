{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\MiscWorkSpace\\\\ReactNative\\\\my-app\\\\screens\\\\NoInternet.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport Background from \"../components/Background\";\nimport Logo from \"../components/Logo\";\nimport Header from \"../components/Header\";\nimport Paragraph from \"../components/Paragraph\";\nimport Button from \"../components/Button\";\nimport { theme } from \"../core/theme\";\nexport default function NoInternet(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isConnected = _useState2[0],\n      setisConnected = _useState2[1];\n\n  var heading = props.heading,\n      content = props.content,\n      buttonLabel = props.buttonLabel,\n      errorText = props.errorText;\n  useEffect(function () {\n    var unsubscribe = NetInfo.addEventListener(function (state) {\n      checkStatus(state.isConnected);\n    });\n    return function cleanup() {\n      unsubscribe();\n    };\n  });\n\n  var handleCheckNet = function handleCheckNet() {\n    NetInfo.fetch().then(function (state) {\n      checkStatus(state.isConnected);\n\n      if (!isConnected) {\n        showMessage();\n      }\n    });\n  };\n\n  var checkStatus = function checkStatus(status) {\n    if (status == true) {\n      setisConnected(false);\n    } else {\n      setisConnected(false);\n    }\n  };\n\n  var showMessage = function showMessage() {\n    Snackbar.show({\n      text: errorText,\n      backgroundColor: theme.colors.error,\n      duration: Snackbar.LENGTH_SHORT\n    });\n  };\n\n  return isConnected ? props.MainComponent : React.createElement(Background, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, React.createElement(Logo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, heading), React.createElement(Paragraph, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, content), React.createElement(Button, {\n    mode: \"contained\",\n    onPress: function onPress() {\n      return handleCheckNet();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, buttonLabel));\n}","map":{"version":3,"sources":["D:/MiscWorkSpace/ReactNative/my-app/screens/NoInternet.tsx"],"names":["React","useEffect","useState","NetInfo","Background","Logo","Header","Paragraph","Button","theme","NoInternet","props","isConnected","setisConnected","heading","content","buttonLabel","errorText","unsubscribe","addEventListener","state","checkStatus","cleanup","handleCheckNet","fetch","then","showMessage","status","Snackbar","show","text","backgroundColor","colors","error","duration","LENGTH_SHORT","MainComponent"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,UAAP;AACA,OAAOC,IAAP;AACA,OAAOC,MAAP;AACA,OAAOC,SAAP;AACA,OAAOC,MAAP;AACA,SAASC,KAAT;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAAgC;AAC7C,kBAAsCT,QAAQ,CAAC,KAAD,CAA9C;AAAA;AAAA,MAAOU,WAAP;AAAA,MAAoBC,cAApB;;AACA,MAAQC,OAAR,GAAqDH,KAArD,CAAQG,OAAR;AAAA,MAAiBC,OAAjB,GAAqDJ,KAArD,CAAiBI,OAAjB;AAAA,MAA0BC,WAA1B,GAAqDL,KAArD,CAA0BK,WAA1B;AAAA,MAAuCC,SAAvC,GAAqDN,KAArD,CAAuCM,SAAvC;AAEAhB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMiB,WAAW,GAAGf,OAAO,CAACgB,gBAAR,CAAyB,UAACC,KAAD,EAAW;AACtDC,MAAAA,WAAW,CAACD,KAAK,CAACR,WAAP,CAAX;AACD,KAFmB,CAApB;AAIA,WAAO,SAASU,OAAT,GAAmB;AACxBJ,MAAAA,WAAW;AACZ,KAFD;AAGD,GARQ,CAAT;;AAUA,MAAMK,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BpB,IAAAA,OAAO,CAACqB,KAAR,GAAgBC,IAAhB,CAAqB,UAACL,KAAD,EAAW;AAC9BC,MAAAA,WAAW,CAACD,KAAK,CAACR,WAAP,CAAX;;AACA,UAAI,CAACA,WAAL,EAAkB;AAChBc,QAAAA,WAAW;AACZ;AACF,KALD;AAMD,GAPD;;AASA,MAAML,WAAW,GAAG,SAAdA,WAAc,CAACM,MAAD,EAAiB;AACnC,QAAIA,MAAM,IAAI,IAAd,EAAoB;AAClBd,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD,KAFD,MAEO;AACLA,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AACF,GAND;;AAQA,MAAMa,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBE,IAAAA,QAAQ,CAACC,IAAT,CAAc;AACZC,MAAAA,IAAI,EAAEb,SADM;AAEZc,MAAAA,eAAe,EAAEtB,KAAK,CAACuB,MAAN,CAAaC,KAFlB;AAGZC,MAAAA,QAAQ,EAAEN,QAAQ,CAACO;AAHP,KAAd;AAKD,GAND;;AAQA,SAAOvB,WAAW,GAChBD,KAAK,CAACyB,aADU,GAGhB,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAStB,OAAT,CAFF,EAGE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYC,OAAZ,CAHF,EAIE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,WAAb;AAAyB,IAAA,OAAO,EAAE;AAAA,aAAMQ,cAAc,EAApB;AAAA,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,WADH,CAJF,CAHF;AAYD","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport NetInfo from \"@react-native-community/netinfo\";\r\nimport Background from \"../components/Background\";\r\nimport Logo from \"../components/Logo\";\r\nimport Header from \"../components/Header\";\r\nimport Paragraph from \"../components/Paragraph\";\r\nimport Button from \"../components/Button\";\r\nimport { theme } from \"../core/theme\";\r\n\r\nexport default function NoInternet(props: any) {\r\n  const [isConnected, setisConnected] = useState(false);\r\n  const { heading, content, buttonLabel, errorText } = props;\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = NetInfo.addEventListener((state) => {\r\n      checkStatus(state.isConnected);\r\n    });\r\n\r\n    return function cleanup() {\r\n      unsubscribe();\r\n    };\r\n  });\r\n\r\n  const handleCheckNet = () => {\r\n    NetInfo.fetch().then((state) => {\r\n      checkStatus(state.isConnected);\r\n      if (!isConnected) {\r\n        showMessage();\r\n      }\r\n    });\r\n  };\r\n\r\n  const checkStatus = (status: any) => {\r\n    if (status == true) {\r\n      setisConnected(false);\r\n    } else {\r\n      setisConnected(false);\r\n    }\r\n  };\r\n\r\n  const showMessage = () => {\r\n    Snackbar.show({\r\n      text: errorText,\r\n      backgroundColor: theme.colors.error,\r\n      duration: Snackbar.LENGTH_SHORT,\r\n    });\r\n  };\r\n\r\n  return isConnected ? (\r\n    props.MainComponent\r\n  ) : (\r\n    <Background>\r\n      <Logo />\r\n      <Header>{heading}</Header>\r\n      <Paragraph>{content}</Paragraph>\r\n      <Button mode=\"contained\" onPress={() => handleCheckNet()}>\r\n        {buttonLabel}\r\n      </Button>\r\n    </Background>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}